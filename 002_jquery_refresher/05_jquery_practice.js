import $ from 'jquery';

// Все абзацы <p>, внутри которых есть <b>, оберните в тег <div>.
$('p:has(b)').wrap('div');

//  Найдите все абзацы <p> с классом .www, поставьте им в начало текст '!', затем добавьте к этим абзацам еще и заголовки h1-h6 и покрасьте эти абзацы и заголовки в красный цвет.
$('p.www').prepend('!').add(':header').css('color', 'red');

//  Найдите все абзацы <p>, и замените их на тег <div> с таким же содержимым.
$('p').each(() => {
	const $this = $(this);
	$this.replaceWith(`<div>${$this.html()}</div>`);
});
$('p').replaceWith(() => {
	return `<div>${$(this).html()}</div>`;
});

//  Найдите все чекбоксы на странице и заблокируйте четные из найденных.
$(':checkbox:even').prop('disabled', true);

//  Поставьте всем незаблокированным чекбоксам статус "отмечен".
$(':checkbox:not(:disabled)').prop('checked', true);

//  Дан элемент #test. Поставьте его непосредственному соседу сверху текст '!', а соседу снизу - текст '?'. Решите задачу одной цепочкой.
$('#test').prev().text('!').end().next().text('?');

//  Дан элемент #test. Поставьте его непосредственным соседям сверху и снизу текст элемента #test.
(function() {
	const $testElem = $('#test');
	const text = $testElem.html();
	$testElem.prev().html(text).end().next().html(text);
})();

//  Дан элемент #test. Найдите среди его соседей сверху ближайший абзац и поставьте ему текст элемента #test.
(function() {
	const $testElem = $('#test');
	const text = $testElem.html();
	$testElem.prevAll('p').first().html(text);
})();

//  Найдите второй <li> на странице, добавьте ему класс .www, оберните его внутри тегом <i>, вставьте после него <li> с текстом 'привет'.
$('li:eq(1)').addClass('www').wrapInner('i').after('<li>привет</li>');

//  Найдите десятый <li> на странице, найдите его родителя, получите непосредственного соседа родителя сверху, оберните его в <div class="www">.
$('li:eq(9)').parent().prev().wrap('<div class="www"></div>');

//  Каждому абзацу <p>, кроме абзацев с классом .www, добавьте к конец его порядковый номер.
$('p:not(.www)').each(i => {
	$(this).append(i);
});
$('p:not(.www)').append(index => index);

//  Найдите все абзацы <p> и поставьте перед каждым абзацем его копию. Копию покрасьте в красный цвет, а исходный абзац в зеленый.
$('p').before(() => $(this).clone().css('color', 'red')).css('color', 'green');

//  Найдите абзацы <p>, которые стоят непосредственно под <h2> и переместите каждый абзац так, чтобы он стал непосредственно над <h2>.
$('h2 + p').each(() => {
	const $this = $(this);
	$this.insertBefore($this.prev());
});
$('h2 + p').prev().before(() => {
	return $(this).next();
});

//  Найдите все пустые абзацы <p> (без текста) и вставьте в них текст непосредственного соседа сверху.
$('p:empty').each(() => {
	const $this = $(this);
	$this.text($this.prev().text());
});
$('p:empty').text(() => {
	return $(this).prev().text();
});

//  Родителю тега <b>, если это элемент с классом .www или абзац <p>, поставьте красный цвет и размер текста в 30px.
$('p > b', '.www > b').parent().css({ color: 'red', fontSize: '30px' });
$('b').parent('.www, p').css({ color: 'red', fontSize: '30px' });

//  Всем пустым абзацам <p> поставьте текст ближайшего к ним сверху тега <h2>.
$('p:empty').text(() => {
	return $(this).prevAll('h2').first().text();
	// то же самое - возвратит текст первого  в наборе элемента
	// return $(this).prevAll('h2').text();
});

//  Даны инпуты с числами. Сделайте так, чтобы в инпутах стали квадраты этих чисел. Показать подсказку.
$('input').each(() => {
	const $this = $(this);
	$this.val(Math.pow($this.val(), 2));
});
$('input').val((index, value) => {
	return value * value;
});

//  Дан элемент #test. Поставьте ему в начало текст непосредственного соседа сверху, а в конец - текст непосредственного соседа снизу.
$('#test').prepend(() => $(this).prev().text()).append(() => $(this).next().text());

//  Дан элемент #test. Найдите его второго соседа сверху и его второго соседа снизу. Сделайте так, чтобы найденные элементы обменялись текстом (сосед сверху возьмет текст соседа снизу и наоборот).
(function() {
	const prevSibling = $('test').prev().prev();
	const nextSibling = $('test').next().next();
	prevSibling.text(nextSibling.text());
	nextSibling.text(prevSibling.text());
})();

//  Дан элемент <div>. Выберите из него всех непосредственных потомков, которые не являются заголовками и покрасьте их в красный цвет.
$('div').children(':not(:header)').css('color', 'red');

//  Найдите все абзацы <p>, покрасьте их в красный цвет. Затем выберите среди найденных абзацев абзацы с классом .www и поставьте им текст '!'.
$('p').css('color', 'red').filter('.www').text('!');

//  Найдите все абзацы <p> с классом .www, покрасьте их в красный цвет. Затем выберите среди найденных абзацев первый и поставьте ему текст '!', затем выберите последний и ему поставьте текст '?'. Решите задачу одной цепочкой.
$('p.www').css('color', 'red').first().html('!').end().last().html('?');

//  Найдите все абзацы <p>, поставьте каждому из них в конец тот же текст, который стоит внутри него (то есть текст в абзаце станет написан два раза).
$('p').append((index, text) => text);

//  Найдите все абзацы <p>, поставьте каждому из них в конец его порядковый номер в наборе.
$('p').append(index => index);

//  Даны абзацы с числами. Поставьте каждому из них в конец число, которое в нем хранится, умноженное на его порядковый номер в наборе.
$('p').append((index, value) => index * value);

//  По нажатию на абзац <p> удалите его непосредственных соседей сверху и с низу.
$('p').on('click', () => {
	$(this).prev().remove().end().next().remove();
});

//  По нажатию на абзац <p> удалите всех его соседей сверху до первого заголовка h1-h6 (то есть элементы, стоящие выше этого заголовка и сам заголовок удалять не надо).
$('p').on('click', () => {
	$(this).prevUntil(':header').remove();
});

//  По нажатию на абзац <p> удалите его ближайшего нижнего соседа с классом .www.
$('p').on('click', () => {
	$(this).nextAll('.www').first().remove();
});

//  По нажатию на абзац <p> удалите его пятого соседа снизу.
$('p').on('click', () => {
	$(this).nextAll(':eq(4)').remove();
});

//  По нажатию на абзац <p> удалите его пятого соседа снизу, если это не <h2>.
$('p').on('click', () => {
	$(this).nextAll(':eq(4)').remove(':not(h2)');
});

//  По нажатию на абзац <p> удалите его пятого соседа снизу, если этот сосед не имеет внутри себя тега <b>.
$('p').on('click', () => {
	$(this).nextAll(':eq(4)').remove(':not(:has(b))');
});

//  По нажатию на абзац <p> удалите его пятого соседа снизу, если этот сосед не стоит непосредственно после <h2>.
$('p').on('click', () => {
	$(this).nextAll(':eq(4)').remove(':not(h2 + *)');
});
$('p').on('click', () => {
	$(this).nextAll().eq(3).not('h2').next().remove();
});

//  Дан элемент #test. Поменяйте этот элемент местами с его непосредственным соседом снизу.
$('#test').insertAfter(() => $(this).next());

//  Дан элемент #test. После его непосредственного соседа снизу вставьте копию нашего элемента.
$('#test').clone().insertAfter($('#test').next());

//  Дан элемент #test. Поменяйте этот элемент местами с его ближайшим соседом снизу с классом .www.
$('#test').insertAfter(() => $(this).nextAll('.www').first());

//  Найдите все абзацы <p>, которые внутри одного родителя лежат между одним и другим <h2>.
(function() {
	const arr = [];
	const $temp = $('.parent h2:first').nextUntil('.parent h2:last');
	$temp.each(() => {
		if ($(this).is('p')) {
			arr.push(this);
		}
	});
	console.log(arr);
})();

//  Оберните каждый абзац <p> снаружи и внутри в <div>.
$('p').wrap('div').wrapInner('div');

//  Найдите все абзацы <p>, у которых непосредственный родитель не <div> и оберните каждый из них в <div class="www">.
$(':not(div) > p').wrap('<div class="www"></div>');

//  Найдите все абзацы <p>. Удалите их родителя (сделайте ему unwrap), если этот родитель не <div> с классом .www. Затем для те абзацы, у которых был удален родитель, оберните в <div> с классом .zzz.
$(':not(div.www) > p').unwrap().wrap('<div class="zzz"></div>');

//  Найдите всех родителей элемента #test и создайте массив из CSS классов этих родителей.

(function () {
	const arr = [];
	$('#test').parents().each(() => {
		const classes = $(this).attr('class').split(' ');
		if (classes.length) {
			arr.concat(classes);
		}
	});
	console.log(arr);	
})();


//  Найдите все абзацы <p>, у которых есть атрибут class, и каждый из них оберните в <div> с теми же классами, как у найденного абзаца, а классы каждого абзаца удалите вместе с атрибутом class.
$('p[class]').wrap(() => `<div class=${$(this).attr('class')}></div>`).removeAttr('class');

//  Найдите все абзацы <p> из #test, поставьте им в конец текст '!', затем исключите из найденных абзацы с классом .www и оставшимся поставьте красный цвет.
$('#test p').append('!').filter(':not(.www)').css('color', 'red');
$('#test').children('p').append('!').not('.www').css('color', 'red');

//  Найдите все <li> на странице, затем перед предпоследним из найденных вставьте еще один <li> с текстом 'пункт'.


//  Найдите все <li> на странице, затем выберите среди найденных второй, третий и четвертый с конца и поставьте им текст '!'.

//  Найдите <ol> с #test и переставьте все <li> в нем в обратном порядке. Показать подсказку.

//  Дан элемент #text. Найдите всех его соседей сверху и всех его соседей снизу и поменяйте их местами (то есть все, что стоит до элемента, должно стать после него и наоборот).

//  Получите все <li> с классом .www, сделайте им красный цвет, затем найдите среди найденных те <li>, у которых есть класс .bbb и удалите их. Решите все одной цепочкой.

//  Получите все <li> на странице. Четные из полученных сделайте пустыми, а нечетные удалите.

//  Найдите все теги <div> и удвойте им высоту.

//  Найдите сумму высот всех <div> на странице.

//  Для элемента #test найдите ближайшего родителя с классом .www, в конец этого родителя добавьте абзац с текстом '!'. Показать подсказку.

//  По нажатию на элемент #test найдите его ближайшего родителя с классом .www, внутри этого родителя найдите все абзацы и покрасьте их в красный цвет.

//  Покрасьте первые 10 <li> на странице в красный цвет.

//  Покрасьте с 5-той по 10-ю <li> на странице в красный цвет.

//  Найдите последние 10 <li> на странице, покрасьте их в красный цвет. Затем из найденных найдите четные <li> и оберните их внутри в тег <b>.

//  На странице даны чекбоксы. Подсчитайте, сколько из них отмечены.

//  Дано 5 чекбоксов. Сделайте так, чтобы после того, как пользователь отметил два из них, все чекбоксы заблокировались.

//  Сделайте так, чтобы все отмеченные чекбоксы сменили свое состояние на неотмеченное и наоборот.

//  Дан инпуты. Переместите содержимое атрибута value в атрибут placeholder, а сам атрибут value удалите совсем.

//  Дана ссылка. Если атрибут href начинается на http://, добавьте ссылке атрибут target="_blank".

//  Дан инпут, в который можно ввести число. Сделайте так, чтобы при вводе числа в этот инпут и потери фокуса на странице искался чекбокс с таким номером и становился отмеченным, а остальные чекбоксы становились неотмеченными.

//  Дан селект и радио кнопочки, количество радио равно количеству пунктов в селекте. Сделайте так, чтобы при выборе пункта в селекте автоматически становилась отмеченной соответствующая радио кнопочка (соответствие по номеру следования: первый пункт списка - первому радио и так далее).
